# Universidad del Valle de Guatemala

import random
import simpy
# P se refiere al proceso

RANDOM_SEED = 42
CREATE_PROCESS = 50
INTERVALO_PRO = 10.0 

def generador(enviroment, NumPro, intervalo, Memoria ,CPU, WTime):
    for i in range(NumPro):
        CRandom = random.randint(1,10) # Aleatorio
        CMemory = random.randint(1,10) 
        Generator = proceso(enviroment, 'Proceso:%02d' % i, CMemory, Memoria ,CPU, WTime, CRandom)
        enviroment.process(Generator)
        timeSimulator = random.expovariate(1.0 / intervalo) 
        yield enviroment.timeout(timeSimulator)


def proceso(enviroment, InstLL, CMemory, Memoria, CPU, WTime, CRandom):
    global SimuladorT, SimuladorDEV
    NProcess = enviroment.now 
    DispoRAM = Memoria.capacity - CMemory
    print('P: %7.4fs %s: Proceso/Llegada inst >>' % (NProcess, InstLL))
    print('P: %7.4fs %s: RAM req %s / RAM dis  %s' % (NProcess, InstLL, CRandom, DispoRAM)) 

    with Memoria.get(CMemory) as MemoUS:     
        yield MemoUS
        EsperaT = enviroment.now - NProcess        
        
        print('P: %7.4fs %s: Event: Ready >> Request RAM %6.3f' % (NProcess, InstLL, Memoria.level))
        
        while CRandom > 0:
            with CPU.request() as reqCPU: 
                yield reqCPU
                print('P: %7.4fs %s: Running Event %6.3f' % (NProcess, InstLL, CRandom))

                yield enviroment.timeout(1)
            
                if CRandom > 3:
                    CRandom = CRandom - 3
                else:
                    CRandom = 0
            
            if CRandom > 0:
                PROWait = random.randint(1,2) 
                if PROWait == 1: 
                    with WTime.request() as TMRequest: 
                        yield TMRequest 
                        print ('P: %7.4fs %s: Waiting... >>' % (NProcess, InstLL))

                        yield enviroment.timeout(1)
              
                print('P: %7.4fs %s: Ready >> Continue >>' % (NProcess, InstLL))
        ProcTime = enviroment.now - NProcess
        print ('p: %7.4fs %s:INST Terminada, ExecutionT >> %s' % (enviroment.now, InstLL, ProcTime))
		
        with Memoria.put(CMemory) as RefreshRAM:
            yield RefreshRAM
            print ('P: %7.4fs %s: Liberando RAM %s' % (enviroment.now, InstLL, CMemory))
			
        SimuladorT = SimuladorT + (enviroment.now - NProcess)
        SimuladorDEV = (SimuladorT*SimuladorT) + (SimuladorDEV)
        print('P: %7.4fs Memoria utilizada / Revision RAM%6.3f >> tiempo Actual %s' % (enviroment.now, Memoria.level, SimuladorT))        

print('>> System.Start <<')
random.seed(RANDOM_SEED)
enviroment = simpy.Environment()

# Ejecutar los procesos
CPU = simpy.Resource(enviroment, capacity=1)
Memoria = simpy.Container(enviroment, init=200, capacity=200)
WTime = simpy.Resource(enviroment, capacity=1)
enviroment.process(generador(enviroment, CREATE_PROCESS, INTERVALO_PRO, Memoria, CPU, WTime))
SimuladorT = 0
SimuladorDEV = 0
enviroment.run()
print "Tiempo de Ejecucion: " , SimuladorT, ": Promedio tiempo: " , SimuladorT/CREATE_PROCESS, ": Desviacion Estandar: " , ((SimuladorDEV/CREATE_PROCESS)**(0.5))

